# SMART TODO LIST APP (BACKEND)
# =================================
# Django REST Framework backend for AI-powered task management

# 1. INSTALL DEPENDENCIES (in terminal):
# pip install django djangorestframework psycopg2-binary openai python-dotenv

# 2. PROJECT STRUCTURE
# smart_todo/
# ├── smart_todo/               # Django project root
# │   └── settings.py, urls.py
# ├── tasks/                    # App for tasks
# ├── context_data/             # App for context entries
# └── ai_module/                # AI logic

# ----------------------------------------
# tasks/models.py
from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=100)
    usage_count = models.IntegerField(default=0)

    def __str__(self):
        return self.name

class Task(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    priority_score = models.FloatField(default=0)
    deadline = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=50, default="pending")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

# ----------------------------------------
# context_data/models.py
from django.db import models

class ContextEntry(models.Model):
    content = models.TextField()
    source_type = models.CharField(max_length=50)  # e.g. WhatsApp, email, notes
    timestamp = models.DateTimeField(auto_now_add=True)
    processed_insight = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"{self.source_type} - {self.timestamp}"

# ----------------------------------------
# tasks/serializers.py
from rest_framework import serializers
from .models import Task, Category

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = '__all__'

class TaskSerializer(serializers.ModelSerializer):
    class Meta:
        model = Task
        fields = '__all__'

# ----------------------------------------
# context_data/serializers.py
from rest_framework import serializers
from .models import ContextEntry

class ContextEntrySerializer(serializers.ModelSerializer):
    class Meta:
        model = ContextEntry
        fields = '__all__'

# ----------------------------------------
# ai_module/ai_engine.py
import openai
from context_data.models import ContextEntry
from tasks.models import Task, Category

openai.api_key = 'your-api-key-here'  # or use .env with dotenv


def generate_ai_suggestions(task_data, context_data):
    prompt = f"""
You are a smart task assistant.
Given:
- Task: {task_data}
- Context: {context_data}
Suggest:
1. Improved description
2. Recommended category
3. Priority score (0 to 100)
4. Suggested deadline
"""

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )

    return response.choices[0].message['content']

# ----------------------------------------
# tasks/views.py
from rest_framework import viewsets
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Task, Category
from .serializers import TaskSerializer, CategorySerializer
from ai_module.ai_engine import generate_ai_suggestions
from context_data.models import ContextEntry
from context_data.serializers import ContextEntrySerializer

class TaskViewSet(viewsets.ModelViewSet):
    queryset = Task.objects.all().order_by('-created_at')
    serializer_class = TaskSerializer

class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer

@api_view(['POST'])
def get_ai_task_suggestions(request):
    task_data = request.data.get("task")
    context_entries = ContextEntry.objects.order_by('-timestamp')[:10]
    context_text = "\n".join([entry.content for entry in context_entries])
    suggestion = generate_ai_suggestions(task_data, context_text)
    return Response({"suggestion": suggestion})

# ----------------------------------------
# context_data/views.py
from rest_framework import viewsets
from .models import ContextEntry
from .serializers import ContextEntrySerializer

class ContextEntryViewSet(viewsets.ModelViewSet):
    queryset = ContextEntry.objects.all().order_by('-timestamp')
    serializer_class = ContextEntrySerializer

# ----------------------------------------
# smart_todo/urls.py
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from tasks.views import TaskViewSet, CategoryViewSet, get_ai_task_suggestions
from context_data.views import ContextEntryViewSet

router = DefaultRouter()
router.register(r'tasks', TaskViewSet)
router.register(r'categories', CategoryViewSet)
router.register(r'context', ContextEntryViewSet)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(router.urls)),
    path('api/tasks/ai-suggestions/', get_ai_task_suggestions),
]

# ----------------------------------------
# .env example:
# DATABASE_URL=postgresql://username:password@host:port/dbname
# OPENAI_API_KEY=your-key-here

# ----------------------------------------
# Run these commands to apply migrations and start the server:
# python manage.py makemigrations
# python manage.py migrate
# python manage.py runserver
